#!/usr/bin/env python

import optparse
import sys
import os
import xml.dom.minidom
import tempfile

import particles
import export

# Write the md box
def writebox(filename, box):
	doc = xml.dom.minidom.Document()

	b  = doc.createElement("box")
	b.appendChild(doc.createTextNode("%f %f %f %f %f %f" % tuple(box)))
	
	doc.appendChild(b)

	fh   = open(filename, "w")
	doc.writexml(fh, "", "\t", "\n")
	fh.close()

	# We need to chop of the first line to remove the <?xml ...>
	# stuff so that we can include the mesh file wherever we want
	t = "\n".join(open(filename, "r").read().split("\n")[1:])
	open(filename, "w").write(t)


def choose(r, p):
	if (p[0] - r-5)*(p[0] - r-5) + (p[1] - r-5)*(p[1] - r-5) < r*r:
		return True
	else:
		return False

if __name__ == "__main__":
	parser = optparse.OptionParser("usage: %prog [options] name")
#	parser.add_option("--na",
#			  action  = "store",
#			  type    = "string",
#			  dest    = "na",
#			  help    = "approx. number of atoms in each direction")
#	parser.add_option("--rho",
#			  action  = "store",
#			  type    = "string",
#			  default = "0.280615512077343 0.486040324309916 5.0",
#			  dest    = "rho",
#			  help    = "offset for lattice")
	parser.add_option("--radius",
			   action  = "store",
			   type    = "float",
			   dest    = "radius",
			   help    = "radius of the sphere")
	(opts,args) = parser.parse_args()

	stamp = ''
	for v in sys.argv:
		stamp = "%s %s" % (stamp,v)
	fh = open("stamp","w")
	fh.write(stamp + "\n")
	fh.close()

#	rho = map(lambda v: float(v), opts.rho.strip().split(' '))
#	na  = map(lambda v:   int(v), opts.na.strip().split(' ') )

	# Create the particle file and write out the box
	P   = particles.CreateHex2ParticleList   ([ 4*opts.radius, 4*opts.radius, 1 ], [ 5.0, 5.0, 5.0 ], lambda p: choose(opts.radius, p))
	box = particles.BoundingBoxOfParticleList(P , [ 5.0, 5.0, 5.0 ])

	export.ExportParticleList("atoms.data", X = P, box = box)

	writebox ("box.xml", box)
